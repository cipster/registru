package services;import model.entity.DestinatarEntity;import model.repository.DestinatarRepository;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.rules.ExpectedException;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import org.springframework.security.acls.model.AlreadyExistsException;import static org.junit.Assert.assertTrue;import static org.mockito.Matchers.*;import static org.mockito.Mockito.when;@RunWith(MockitoJUnitRunner.class)public class DestinatarServiceImplTest {    private static final long ID = 1L;    @Rule    public ExpectedException expectedException = ExpectedException.none();    @Mock    private DestinatarRepository destinatarRepositoryMock;    @InjectMocks    private DestinatarServiceImpl classUnderTest;    private DestinatarEntity destinatarStub;    @Before    public void setUp() throws Exception {        destinatarStub = new DestinatarEntity();        destinatarStub.setDestinatar("Destinatar");        destinatarStub.setIdDestinatar(ID);    }    @Test    public void testSaveThatAlreadyExists() throws Exception {        expectedException.expect(AlreadyExistsException.class);        when(destinatarRepositoryMock.findOneByDestinatarEquals(anyString())).thenReturn(new DestinatarEntity());        classUnderTest.save(destinatarStub);    }    @Test    public void testSaveIsSuccess() throws Exception {        when(destinatarRepositoryMock.findOneByDestinatarEquals(anyString())).thenReturn(null);        when(destinatarRepositoryMock.save(any(DestinatarEntity.class))).thenReturn(destinatarStub);        DestinatarEntity test = classUnderTest.save(destinatarStub);        assertTrue(test != null);    }    @Test    public void testGetDestinatarIsNull() throws Exception {        when(destinatarRepositoryMock.findOne(anyLong())).thenReturn(null);        DestinatarEntity test = classUnderTest.getDestinatar(ID);        assertTrue(test == null);    }    @Test    public void testGetDestinatarIsNotNull() throws Exception {        when(destinatarRepositoryMock.findOne(anyLong())).thenReturn(destinatarStub);        DestinatarEntity test = classUnderTest.getDestinatar(ID);        assertTrue(test != null);    }}