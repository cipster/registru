package services;import model.RezervareInregistrare;import model.entity.*;import model.repository.*;import model.response.JSONResponse;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.sql.Date;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;@Servicepublic class RegistruServiceImpl implements RegistruService {    private final static Logger LOGGER = LoggerFactory.getLogger(RegistruServiceImpl.class);    private static final String ALL_NON_NUMBER_CHARS = "\\D";    private static final String EMPTY_STRING = "";    private static final String ZERO_STRING = "0";    private static final String NREGISTRAREA_A_FOST_ACTUALIZATA = "&#206;nregistrarea %s / %s a fost actualizat&#259;";    private static final String INREGISTRAREA_A_FOST_ANULATA = "&#206;nregistrarea %s / %s a fost anulat&#259;";    private static final String NUMARUL_EXISTA_DEJA = "Num&#259;rul de &#238;nregistrare exist&#259; deja &#238;n registru";    private static final String NUMERE_NU_SUNT_CONSECUTIVE = "Numerele de &#238;nregistrare trebuie s&#259; fie consecutive";    private static final String OK = "OK";    @Autowired    private RegistruAOUGRepository registruAOUGRepository;    @Autowired    private RegistruAOUGViewRepository registruAOUGViewRepository;    @Autowired    private IesireRepository iesireRepository;    @Autowired    private IntrareViewRepository intrareViewRepository;    @Autowired    private IntrareRepository intrareRepository;    @Autowired    private RegistruOGBViewRepository registruOGBViewRepository;    @Autowired    private RegistruOGBRepository registruOGBRepository;    @Autowired    private CondicaViewRepository condicaViewRepository;    @Autowired    private CondicaRepository condicaRepository;    @Override    @Transactional    public RegistruAOUGEntity saveAOUG(RegistruAOUGEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return registruAOUGRepository.save(entity);    }    @Override    public RegistruAOUGEntity editAOUG(RegistruAOUGEntity entity) {        entity.setRezervat(2);        return registruAOUGRepository.save(entity);    }    @Override    public RegistruOGBEntity saveOGB(RegistruOGBEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return registruOGBRepository.save(entity);    }    @Override    public RegistruOGBEntity editOGB(RegistruOGBEntity entity) {        entity.setRezervat(2);        return registruOGBRepository.save(entity);    }    @Override    public CondicaPredarePrimireDocumenteEntity saveCondica(CondicaPredarePrimireDocumenteEntity entity) {        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return condicaRepository.save(entity);    }    @Override    public CondicaPredarePrimireDocumenteEntity editCondica(CondicaPredarePrimireDocumenteEntity entity) {        entity.setRezervat(2);        return condicaRepository.save(entity);    }    @Override    public IntrareEntity saveIntrare(IntrareEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return intrareRepository.save(entity);    }    @Override    public IesireEntity saveIesire(IesireEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return iesireRepository.save(entity);    }    @Override    @Transactional    public List<IntrareViewEntity> findAllIntrari() {        return (List<IntrareViewEntity>) intrareViewRepository.findAll();    }    @Override    @Transactional    public List<IesireEntity> findAllIesiri() {        return (List<IesireEntity>) iesireRepository.findAll();    }    @Override    @Transactional    public List<RegistruAOUGViewEntity> findAllAOUG() {        return (List<RegistruAOUGViewEntity>) registruAOUGViewRepository.findAll();    }    @Override    @Transactional    public List<RegistruOGBViewEntity> findAllOGB() {        return (List<RegistruOGBViewEntity>) registruOGBViewRepository.findAll();    }    @Override    public List<CondicaPredarePrimireDocumenteViewEntity> findAllCondica() {        return (List<CondicaPredarePrimireDocumenteViewEntity>) condicaViewRepository.findAll();    }    @Override    public JSONResponse formatFizicOGB(long id) {        RegistruOGBEntity ogbEntity = registruOGBRepository.findOne(id);        ogbEntity.setFormatFizic(1);        registruOGBRepository.save(ogbEntity);        String msg = String.format(NREGISTRAREA_A_FOST_ACTUALIZATA, ogbEntity.getNrInregistrare(), ogbEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicAOUG(long id) {        RegistruAOUGEntity aougEntity = registruAOUGRepository.findOne(id);        aougEntity.setFormatFizic(1);        registruAOUGRepository.save(aougEntity);        String msg = String.format(NREGISTRAREA_A_FOST_ACTUALIZATA, aougEntity.getNrInregistrare(), aougEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicIntrare(long id) {        IntrareEntity intrareEntity = intrareRepository.findOne(id);        intrareEntity.setFormatFizic(1);        intrareRepository.save(intrareEntity);        String msg = String.format(NREGISTRAREA_A_FOST_ACTUALIZATA, intrareEntity.getNrCrt(), intrareEntity.getDataIntrarii());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicIesire(long id) {        IesireEntity iesireEntity = iesireRepository.findOne(id);        iesireEntity.setFormatFizic(1);        iesireRepository.save(iesireEntity);        String msg = String.format(NREGISTRAREA_A_FOST_ACTUALIZATA, iesireEntity.getNrDosarSiAn(), iesireEntity.getDataIesirii());        return new JSONResponse(msg);    }    @Override    public String findLastNrCrtIntrare() {        String nrCrt;        try {            nrCrt = intrareRepository.findTop1ByOrderByIdIntrareDesc().getNrCrt();        } catch (Exception e) {            nrCrt = ZERO_STRING;        }        nrCrt = nrCrt.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtAOUG() {        String nrCrt;        try {            nrCrt = registruAOUGRepository.findFirstByOrderByIdRegistruAougDesc().getNrInregistrare();        } catch (Exception e) {            nrCrt = ZERO_STRING;        }        nrCrt = nrCrt.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);        if (StringUtils.isBlank(nrCrt)) {            nrCrt = ZERO_STRING;        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtOGB() {        String nrCrt;        try {            nrCrt = registruOGBRepository.findFirstByOrderByIdRegistruOgbDesc().getNrInregistrare();        } catch (Exception e) {            nrCrt = ZERO_STRING;        }        nrCrt = nrCrt.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);        if (StringUtils.isBlank(nrCrt)) {            nrCrt = ZERO_STRING;        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtCondica() {        String nrCrt;        try {            nrCrt = condicaRepository.findFirstByOrderByIdCondicaPredareSiPrimireDocumenteDesc().getNrInregistrare();        } catch (Exception e) {            nrCrt = ZERO_STRING;        }        nrCrt = nrCrt.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);        if (StringUtils.isBlank(nrCrt)) {            nrCrt = ZERO_STRING;        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public JSONResponse anulareOGB(long id) {        RegistruOGBEntity ogbEntity = registruOGBRepository.findOne(id);        ogbEntity.setAnulat(1);        registruOGBRepository.save(ogbEntity);        String msg = String.format(INREGISTRAREA_A_FOST_ANULATA, ogbEntity.getNrInregistrare(), ogbEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareAOUG(long id) {        RegistruAOUGEntity aougEntity = registruAOUGRepository.findOne(id);        aougEntity.setAnulat(1);        registruAOUGRepository.save(aougEntity);        String msg = String.format(INREGISTRAREA_A_FOST_ANULATA, aougEntity.getNrInregistrare(), aougEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareIntrare(long id) {        IntrareEntity intrareEntity = intrareRepository.findOne(id);        intrareEntity.setAnulat(1);        intrareRepository.save(intrareEntity);        String msg = String.format(INREGISTRAREA_A_FOST_ANULATA, intrareEntity.getNrCrt(), intrareEntity.getDataIntrarii());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareIesire(long id) {        IesireEntity iesireEntity = iesireRepository.findOne(id);        iesireEntity.setAnulat(1);        iesireRepository.save(iesireEntity);        String msg = String.format(INREGISTRAREA_A_FOST_ANULATA, iesireEntity.getNrDosarSiAn(), iesireEntity.getDataIesirii());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareCondica(long id) {        CondicaPredarePrimireDocumenteEntity condicaEntity = condicaRepository.findOne(id);        condicaEntity.setAnulat(1);        condicaRepository.save(condicaEntity);        String msg = String.format(INREGISTRAREA_A_FOST_ANULATA, condicaEntity.getNrInregistrare(), condicaEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse checkDuplicatAOUG(String val) {        RegistruAOUGEntity foundEntity = registruAOUGRepository.findOneByNrInregistrareEquals(val);        if (foundEntity != null) {            return new JSONResponse(-1, NUMARUL_EXISTA_DEJA);        } else {            val = val.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);            Long value = Long.valueOf(val);            Long nrInregistrare = Long.valueOf(findLastNrCrtAOUG()) - 1;            Long diff = value - nrInregistrare;            if (diff > 1) {                return new JSONResponse(-1, NUMERE_NU_SUNT_CONSECUTIVE);            }        }        return new JSONResponse(1, OK);    }    @Override    public JSONResponse checkDuplicatOGB(String val) {        RegistruOGBEntity foundEntity = registruOGBRepository.findOneByNrInregistrareEquals(val);        if (foundEntity != null) {            return new JSONResponse(-1, NUMARUL_EXISTA_DEJA);        } else {            val = val.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);            Long value = Long.valueOf(val);            Long nrInregistrare = Long.valueOf(findLastNrCrtOGB()) - 1;            Long diff = value - nrInregistrare;            if (diff > 1) {                return new JSONResponse(-1, NUMERE_NU_SUNT_CONSECUTIVE);            }        }        return new JSONResponse(1, OK);    }    @Override    public JSONResponse checkDuplicatCondica(String val) {        CondicaPredarePrimireDocumenteEntity foundEntity = condicaRepository.findOneByNrInregistrareEquals(val);        if (foundEntity != null) {            return new JSONResponse(-1, NUMARUL_EXISTA_DEJA);        } else {            val = val.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);            Long value = Long.valueOf(val);            Long nrInregistrare = Long.valueOf(findLastNrCrtCondica()) - 1;            Long diff = value - nrInregistrare;            if (diff > 1) {                return new JSONResponse(-1, NUMERE_NU_SUNT_CONSECUTIVE);            }        }        return new JSONResponse(1, OK);    }    @Override    public JSONResponse checkDuplicatIntrare(String val) {        IntrareEntity foundEntity = intrareRepository.findOneByNrCrtEquals(val);        if (foundEntity != null) {            return new JSONResponse(-1, NUMARUL_EXISTA_DEJA);        } else {            val = val.replaceAll(ALL_NON_NUMBER_CHARS, EMPTY_STRING);            Long value = Long.valueOf(val);            Long nrInregistrare = Long.valueOf(findLastNrCrtIntrare()) - 1;            Long diff = value - nrInregistrare;            if (diff > 1) {                return new JSONResponse(-1, NUMERE_NU_SUNT_CONSECUTIVE);            }        }        return new JSONResponse(1, OK);    }    @Override    public List<RegistruOGBEntity> rezervaOGB(RezervareInregistrare rezervare) {        if (new Date(System.currentTimeMillis()).toLocalDate().isBefore(rezervare.getDataInregistrare().toLocalDate())                || new Date(System.currentTimeMillis()).toLocalDate().isAfter(rezervare.getDataInregistrare().toLocalDate())) {            throw new IllegalArgumentException("Nu se pot face rezervari in viitor sau trecut");        }        Long nrInregistrareCurent = Long.valueOf(findLastNrCrtOGB());        List<RegistruOGBEntity> obgRezervate = new ArrayList<>();        RegistruOGBEntity ogbDeRezervat = new RegistruOGBEntity();        ogbDeRezervat.setDataInregistrare(rezervare.getDataInregistrare());        ogbDeRezervat.setRezervat(1);        ogbDeRezervat.setFormatFizic(0);        ogbDeRezervat.setAnulat(0);        ogbDeRezervat.setContinut(" ");        ogbDeRezervat.setCreatDe(UserUtils.getLoggedInUsername());        ogbDeRezervat.setCreatLa(new Timestamp(System.currentTimeMillis()));        for (int i = 0; i < rezervare.getNumarInregistrari(); i++) {            ogbDeRezervat.setNrInregistrare(String.valueOf(nrInregistrareCurent));            obgRezervate.add(registruOGBRepository.save(ogbDeRezervat));            nrInregistrareCurent += 1;        }        return obgRezervate;    }    @Override    public List<RegistruAOUGEntity> rezervaAoug(RezervareInregistrare rezervare) {        if (new Date(System.currentTimeMillis()).toLocalDate().isBefore(rezervare.getDataInregistrare().toLocalDate())                || new Date(System.currentTimeMillis()).toLocalDate().isAfter(rezervare.getDataInregistrare().toLocalDate())) {            throw new IllegalArgumentException("Nu se pot face rezervari in viitor sau trecut");        }        Long nrInregistrareCurent = Long.valueOf(findLastNrCrtAOUG());        List<RegistruAOUGEntity> aougRezervate = new ArrayList<>();        RegistruAOUGEntity aougDeRezervat = new RegistruAOUGEntity();        aougDeRezervat.setDataInregistrare(rezervare.getDataInregistrare());        aougDeRezervat.setRezervat(1);        aougDeRezervat.setFormatFizic(0);        aougDeRezervat.setAnulat(0);        aougDeRezervat.setContinut(" ");        aougDeRezervat.setCreatDe(UserUtils.getLoggedInUsername());        aougDeRezervat.setCreatLa(new Timestamp(System.currentTimeMillis()));        for (int i = 0; i < rezervare.getNumarInregistrari(); i++) {            aougDeRezervat.setNrInregistrare(String.valueOf(nrInregistrareCurent));            aougRezervate.add(registruAOUGRepository.save(aougDeRezervat));            nrInregistrareCurent += 1;        }        return aougRezervate;    }    @Override    public List<CondicaPredarePrimireDocumenteEntity> rezervaCondica(RezervareInregistrare rezervare) {        if (new Date(System.currentTimeMillis()).toLocalDate().isBefore(rezervare.getDataInregistrare().toLocalDate())                || new Date(System.currentTimeMillis()).toLocalDate().isAfter(rezervare.getDataInregistrare().toLocalDate())) {            throw new IllegalArgumentException("Nu se pot face rezervari in viitor sau trecut");        }        Long nrInregistrareCurent = Long.valueOf(findLastNrCrtCondica());        List<CondicaPredarePrimireDocumenteEntity> condicaRezervate = new ArrayList<>();        CondicaPredarePrimireDocumenteEntity condicaDeRezervat = new CondicaPredarePrimireDocumenteEntity();        condicaDeRezervat.setDataInregistrare(rezervare.getDataInregistrare());        condicaDeRezervat.setRezervat(1);        condicaDeRezervat.setAnulat(0);        condicaDeRezervat.setCreatDe(UserUtils.getLoggedInUsername());        condicaDeRezervat.setCreatLa(new Timestamp(System.currentTimeMillis()));        for (int i = 0; i < rezervare.getNumarInregistrari(); i++) {            condicaDeRezervat.setNrInregistrare(String.valueOf(nrInregistrareCurent));            condicaRezervate.add(condicaRepository.save(condicaDeRezervat));            nrInregistrareCurent += 1;        }        return condicaRezervate;    }}