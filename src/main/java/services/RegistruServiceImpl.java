package services;import model.entity.*;import model.repository.*;import model.response.JSONResponse;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.sql.Timestamp;import java.util.List;@Servicepublic class RegistruServiceImpl implements RegistruService {    private final static Logger LOGGER = LoggerFactory.getLogger(RegistruServiceImpl.class);    @Autowired    private RegistruAOUGRepository registruAOUGRepository;    @Autowired    private RegistruAOUGViewRepository registruAOUGViewRepository;    @Autowired    private IesireRepository iesireRepository;    @Autowired    private IntrareViewRepository intrareViewRepository;    @Autowired    private IntrareRepository intrareRepository;    @Autowired    private RegistruOGBViewRepository registruOGBViewRepository;    @Autowired    private RegistruOGBRepository registruOGBRepository;    @Autowired    private CondicaViewRepository condicaViewRepository;    @Autowired    private CondicaRepository condicaRepository;    @Override    @Transactional    public RegistruAOUGEntity saveAOUG(RegistruAOUGEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return registruAOUGRepository.save(entity);    }    @Override    public RegistruOGBEntity saveOGB(RegistruOGBEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return registruOGBRepository.save(entity);    }    @Override    public CondicaPredarePrimireDocumenteEntity saveCondica(CondicaPredarePrimireDocumenteEntity entity) {        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return condicaRepository.save(entity);    }    @Override    public IntrareEntity saveIntrare(IntrareEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return intrareRepository.save(entity);    }    @Override    public IesireEntity saveIesire(IesireEntity entity) {        entity.setRezervat(0);        entity.setAnulat(0);        entity.setCreatDe(UserUtils.getLoggedInUsername());        entity.setCreatLa(new Timestamp(System.currentTimeMillis()));        return iesireRepository.save(entity);    }    @Override    @Transactional    public List<IntrareViewEntity> findAllIntrari() {        return (List<IntrareViewEntity>) intrareViewRepository.findAll();    }    @Override    @Transactional    public List<IesireEntity> findAllIesiri() {        return (List<IesireEntity>) iesireRepository.findAll();    }    @Override    @Transactional    public List<RegistruAOUGViewEntity> findAllAOUG() {        return (List<RegistruAOUGViewEntity>) registruAOUGViewRepository.findAll();    }    @Override    @Transactional    public List<RegistruOGBViewEntity> findAllOGB() {        return (List<RegistruOGBViewEntity>) registruOGBViewRepository.findAll();    }    @Override    public List<CondicaPredarePrimireDocumenteViewEntity> findAllCondica() {        return (List<CondicaPredarePrimireDocumenteViewEntity>) condicaViewRepository.findAll();    }    @Override    public JSONResponse formatFizicOGB(long id) {        RegistruOGBEntity ogbEntity = registruOGBRepository.findOne(id);        ogbEntity.setFormatFizic(1);        registruOGBRepository.save(ogbEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost actualizat&#259;", ogbEntity.getNrInregistrare(), ogbEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicAOUG(long id) {        RegistruAOUGEntity aougEntity = registruAOUGRepository.findOne(id);        aougEntity.setFormatFizic(1);        registruAOUGRepository.save(aougEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost actualizat&#259;", aougEntity.getNrInregistrare(), aougEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicIntrare(long id) {        IntrareEntity intrareEntity = intrareRepository.findOne(id);        intrareEntity.setFormatFizic(1);        intrareRepository.save(intrareEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost actualizat&#259;", intrareEntity.getNrCrt(), intrareEntity.getDataIntrarii());        return new JSONResponse(msg);    }    @Override    public JSONResponse formatFizicIesire(long id) {        IesireEntity iesireEntity = iesireRepository.findOne(id);        iesireEntity.setFormatFizic(1);        iesireRepository.save(iesireEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost actualizat&#259;", iesireEntity.getNrDosarSiAn(), iesireEntity.getDataIesirii());        return new JSONResponse(msg);    }    @Override    public String findLastNrCrtIntrare() {        String nrCrt = intrareRepository.findTop1ByOrderByIdIntrareDesc().getNrCrt();        nrCrt = nrCrt.replaceAll("\\D", "");        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtAOUG() {        String nrCrt = registruAOUGRepository.findFirstByOrderByIdRegistruAougDesc().getNrInregistrare();        nrCrt = nrCrt.replaceAll("\\D", "");        if (StringUtils.isBlank(nrCrt)) {            nrCrt = "0";        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtOGB() {        String nrCrt = registruOGBRepository.findFirstByOrderByIdRegistruOgbDesc().getNrInregistrare();        nrCrt = nrCrt.replaceAll("\\D", "");        if (StringUtils.isBlank(nrCrt)) {            nrCrt = "0";        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public String findLastNrCrtCondica() {        String nrCrt = condicaRepository.findFirstByOrderByIdCondicaPredareSiPrimireDocumenteDesc().getNrInregistrare();        nrCrt = nrCrt.replaceAll("\\D", "");        if (StringUtils.isBlank(nrCrt)) {            nrCrt = "0";        }        nrCrt = String.valueOf(Long.parseLong(nrCrt) + 1);        return nrCrt;    }    @Override    public JSONResponse anulareOGB(long id) {        RegistruOGBEntity ogbEntity = registruOGBRepository.findOne(id);        ogbEntity.setAnulat(1);        registruOGBRepository.save(ogbEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost anulat&#259;", ogbEntity.getNrInregistrare(), ogbEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareAOUG(long id) {        RegistruAOUGEntity aougEntity = registruAOUGRepository.findOne(id);        aougEntity.setAnulat(1);        registruAOUGRepository.save(aougEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost anulat&#259;", aougEntity.getNrInregistrare(), aougEntity.getDataInregistrare());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareIntrare(long id) {        IntrareEntity intrareEntity = intrareRepository.findOne(id);        intrareEntity.setAnulat(1);        intrareRepository.save(intrareEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost anulat&#259;", intrareEntity.getNrCrt(), intrareEntity.getDataIntrarii());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareIesire(long id) {        IesireEntity iesireEntity = iesireRepository.findOne(id);        iesireEntity.setAnulat(1);        iesireRepository.save(iesireEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost anulat&#259;", iesireEntity.getNrDosarSiAn(), iesireEntity.getDataIesirii());        return new JSONResponse(msg);    }    @Override    public JSONResponse anulareCondica(long id) {        CondicaPredarePrimireDocumenteEntity condicaEntity = condicaRepository.findOne(id);        condicaEntity.setAnulat(1);        condicaRepository.save(condicaEntity);        String msg = String.format("&#206;nregistrarea %s / %s a fost anulat&#259;", condicaEntity.getNrInregistrare(), condicaEntity.getDataInregistrare());        return new JSONResponse(msg);    }}