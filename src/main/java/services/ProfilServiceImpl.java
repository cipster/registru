package services;import model.entity.*;import model.repository.*;import model.response.JSONResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.sql.Timestamp;import java.util.List;@Servicepublic class ProfilServiceImpl implements ProfilService {    @Autowired    private ProfilViewRepository profilViewRepository;    @Autowired    private ProfilRepository profilRepository;    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private UserDisplayRepository userDisplayRepository;    @Autowired    private UserRoleRepository userRoleRepository;    @Autowired    private RolesRepository rolesRepository;    @Override    public ProfilViewEntity getProfil() {        return profilViewRepository.findOneByUsernameEquals(UserUtils.getLoggedInUsername());    }    @Override    @Transactional    public JSONResponse save(ProfilEntity profil) {        String username = profilRepository.findOne(profil.getIdProfil()).getUsername();        profil.setUsername(username);        profilRepository.save(profil);        return new JSONResponse("Profil actualizat cu success");    }    @Override    public JSONResponse saveNewUser(UserDisplayEntity userDisplay) {        UserEntity userEntity = saveUserFromForm(userDisplay);        String[] roles = userDisplay.getRoles().split(",");        UserRoleEntity roleToAdd = new UserRoleEntity();        roleToAdd.setUsername(userDisplay.getUsername());        for (String roleNumber : roles) {            String role = rolesRepository.findOne(Long.valueOf(roleNumber)).getRole();            roleToAdd.setRole(role);            userRoleRepository.save(roleToAdd);        }        ProfilEntity profilToAdd = new ProfilEntity();        profilToAdd.setEmail(userDisplay.getEmail());        profilToAdd.setFax(userDisplay.getFax());        profilToAdd.setUsername(userDisplay.getUsername());        profilToAdd.setNume(userDisplay.getNume());        profilToAdd.setPrenume(userDisplay.getPrenume());        profilToAdd.setTel(userDisplay.getTel());        profilToAdd.setWorkTel(userDisplay.getWorkTel());        profilRepository.save(profilToAdd);        return new JSONResponse(String.format("Utilizatorul %s a fost creat cu succes", userEntity.getUsername()));    }    private UserEntity saveUserFromForm(UserDisplayEntity userDisplay) {        UserEntity userToAdd = new UserEntity();        userToAdd.setEnabled(1);        userToAdd.setUsername(userDisplay.getUsername());        userToAdd.setPassword(passwordEncoder.encode("1234rewq"));        userToAdd = userRepository.save(userToAdd);        return userToAdd;    }    @Override    @Transactional    public JSONResponse changePassword(String newPassword) {        UserEntity user = userRepository.findOneByUsernameEquals(UserUtils.getLoggedInUsername());        user.setLastPassChange(new Timestamp(System.currentTimeMillis()));        newPassword = passwordEncoder.encode(newPassword);        user.setPassword(newPassword);        userRepository.save(user);        return new JSONResponse("Parola a fost schimbat&#259; cu success");    }    @Override    public List<UserDisplayEntity> getAllUsers() {        return (List<UserDisplayEntity>) userDisplayRepository.findAll();    }    @Override    public List<UserRoleEntity> getAllRolesForUser(String username) {        return userRoleRepository.findAllByUsernameEquals(username);    }    @Override    public boolean activateUser(long idUser) {        UserEntity userEntity = userRepository.findOne(idUser);        userEntity.setEnabled(1);        userEntity = userRepository.save(userEntity);        return userEntity.getEnabled() == 1;    }    @Override    public boolean deactivateUser(long idUser) {        UserEntity userEntity = userRepository.findOne(idUser);        userEntity.setEnabled(0);        userEntity = userRepository.save(userEntity);        return userEntity.getEnabled() == 0;    }}