package services.jobs;import model.entity.*;import org.joda.time.DateTime;import org.quartz.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.quartz.QuartzJobBean;import services.RegistruService;import java.sql.Date;import java.util.List;@PersistJobDataAfterExecution@DisallowConcurrentExecutionpublic class DeleteUnusedRezervariJob extends QuartzJobBean {    public static final String REGISTRU_SERVICE = "RegistruService";    private final static Logger LOGGER = LoggerFactory.getLogger(DeleteUnusedRezervariJob.class);    private String name;    private RegistruService registruService;    @Override    protected void executeInternal(JobExecutionContext ctx) throws JobExecutionException {        JobDataMap dataMap = ctx.getJobDetail().getJobDataMap();        registruService = (RegistruService) dataMap.get(REGISTRU_SERVICE);        deleteUnusedRezervari();    }    private void deleteUnusedRezervari() {        DateTime lastWeek = new DateTime().minusDays(5);        Date dataTinta = new Date(lastWeek.getMillis());        List<IntrareEntity> intrariDeAnulat = registruService.findAllIntrariDeAnulat(dataTinta);        List<IesireEntity> iesiriDeAnulat = registruService.findAllIesiriDeAnulat(dataTinta);        List<RegistruAOUGEntity> aougDeAnulat = registruService.findAllAougDeAnulat(dataTinta);        List<RegistruOGBEntity> ogbDeAnulat = registruService.findAllOgbDeAnulat(dataTinta);        List<CondicaPredarePrimireDocumenteEntity> condicaDeAnulat = registruService.findAllCondicaDeAnulat(dataTinta);        for (IntrareEntity entity : intrariDeAnulat) {            registruService.deleteIntrare(entity);        }        for (IesireEntity entity : iesiriDeAnulat) {            registruService.deleteIesire(entity);        }        for (RegistruAOUGEntity entity : aougDeAnulat) {            registruService.deleteAoug(entity);        }        for (RegistruOGBEntity entity : ogbDeAnulat) {            registruService.deleteOgb(entity);        }        for (CondicaPredarePrimireDocumenteEntity entity : condicaDeAnulat) {            registruService.deleteCondica(entity);        }        LOGGER.info(String.format("S-a executat anularea a %s rezervari INTRARE in data de %s", intrariDeAnulat.size(), lastWeek));        LOGGER.info(String.format("S-a executat anularea a %s rezervari IESIRE in data de %s", iesiriDeAnulat.size(), lastWeek));        LOGGER.info(String.format("S-a executat anularea a %s rezervari AOUG in data de %s", aougDeAnulat.size(), lastWeek));        LOGGER.info(String.format("S-a executat anularea a %s rezervari OGB in data de %s", ogbDeAnulat.size(), lastWeek));        LOGGER.info(String.format("S-a executat anularea a %s rezervari CONDICA in data de %s", condicaDeAnulat.size(), lastWeek));    }    public void setName(String name) {        this.name = name;    }}