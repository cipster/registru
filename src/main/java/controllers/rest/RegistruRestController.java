package controllers.rest;import model.entity.*;import model.response.JSONResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.dao.DataAccessException;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import services.DestinatarService;import services.RegistruService;import services.TipContinutService;import java.beans.PropertyEditorSupport;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;@RestController@RequestMapping("/app/secure/registru")public class RegistruRestController {    @Autowired    private RegistruService registruService;    @Autowired    private TipContinutService tipContinutService;    @Autowired    private DestinatarService destinatarService;    @InitBinder    public void initBinder(WebDataBinder binder) {        SimpleDateFormat sdf = new SimpleDateFormat("mm-dd-yyyy");        sdf.setLenient(true);        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true));        binder.registerCustomEditor(long.class, new PropertyEditorSupport() {            @Override            public void setAsText(String text) {                if (text.trim().length() == 0) {                    text = "0";                }                long ch = Long.parseLong(text);                setValue(ch);            }        });    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/ogb/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicOGB(@PathVariable long id) {        return registruService.formatFizicOGB(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/aoug/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicAOUG(@PathVariable long id) {        return registruService.formatFizicAOUG(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/intrare/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicIntrare(@PathVariable long id) {        return registruService.formatFizicIntrare(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/iesire/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicIesire(@PathVariable long id) {        return registruService.formatFizicIesire(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-intrare", method = RequestMethod.GET)    @ResponseBody    public String findLastNrCrtIntrare() {        return registruService.findLastNrCrtIntrare();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-aoug", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareAoug() {        return registruService.findLastNrCrtAOUG();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-ogb", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareOgb() {        return registruService.findLastNrCrtOGB();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-condica", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareCondica() {        return registruService.findLastNrCrtCondica();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-condica", method = RequestMethod.GET)    @ResponseBody    public List<CondicaPredarePrimireDocumenteViewEntity> findAllCondica() {        return registruService.findAllCondica();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-aoug", method = RequestMethod.GET)    @ResponseBody    public List<RegistruAOUGViewEntity> findAllAOUG() {        return registruService.findAllAOUG();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-ogb", method = RequestMethod.GET)    @ResponseBody    public List<RegistruOGBViewEntity> findAllOGB() {        return registruService.findAllOGB();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-intrare", method = RequestMethod.GET)    @ResponseBody    public List<IntrareViewEntity> findAllIntrari() {        return registruService.findAllIntrari();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-iesire", method = RequestMethod.GET)    @ResponseBody    public List<IesireEntity> findAllIesiri() {        return registruService.findAllIesiri();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-all-tip-continut", method = RequestMethod.GET)    @ResponseBody    public List<TipContinutEntity> findAllTipContinut() {        return tipContinutService.findAll();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-all-destinatari", method = RequestMethod.GET)    @ResponseBody    public List<DestinatarEntity> findAllDestinatari() {        return destinatarService.findAllDestinatari();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-intrare", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addIntrare(@RequestBody IntrareEntity intrare) {        JSONResponse response = new JSONResponse();        try {            IntrareEntity intrareAdded = registruService.saveIntrare(intrare);            response.setId(intrareAdded.getIdIntrare());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + intrareAdded.getNrCrt() + "/" + intrareAdded.getDataIntrarii());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-iesire", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addIesire(@RequestBody IesireEntity iesire) {        JSONResponse response = new JSONResponse();        try {            IesireEntity iesireAdded = registruService.saveIesire(iesire);            response.setId(iesireAdded.getIdIesire());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + iesireAdded.getNrDosarSiAn() + "/" + iesireAdded.getRezolvare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-aoug", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addInregistrareAOUG(@RequestBody RegistruAOUGEntity registruAOUG) {        JSONResponse response = new JSONResponse();        try {            RegistruAOUGEntity registruAOUGAdaugat = registruService.saveAOUG(registruAOUG);            response.setId(registruAOUGAdaugat.getIdRegistruAoug());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + registruAOUGAdaugat.getNrInregistrare() + "/" + registruAOUGAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-ogb", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addInregistrareOGB(@RequestBody RegistruOGBEntity registruOGB) {        JSONResponse response = new JSONResponse();        try {            RegistruOGBEntity registruOGBAdaugat = registruService.saveOGB(registruOGB);            response.setId(registruOGBAdaugat.getIdRegistruOgb());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + registruOGBAdaugat.getNrInregistrare() + "/" + registruOGBAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-tip-continut", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addTipContinut(@RequestBody TipContinutEntity tipContinut) {        JSONResponse response = new JSONResponse();        try {            TipContinutEntity tipContinutAdded = tipContinutService.save(tipContinut);            response.setId(tipContinutAdded.getIdTipContinut());            response.setMessage("S-a ad&#259;ugat tipul de con&#539;inut: " + tipContinutAdded.getTipContinut());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat tipul de con&#539;inut.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-destinatar", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addDestinatar(@RequestBody DestinatarEntity destinatar) {        JSONResponse response = new JSONResponse();        try {            DestinatarEntity destinatarAdded = destinatarService.save(destinatar);            response.setId(destinatarAdded.getIdDestinatar());            response.setMessage("S-a ad&#259;ugat destinatarul: " + destinatarAdded.getDestinatar());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat destinatarul.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-condica", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addCondica(@RequestBody CondicaPredarePrimireDocumenteEntity condica) {        JSONResponse response = new JSONResponse();        try {            CondicaPredarePrimireDocumenteEntity condicaAdded = registruService.saveCondica(condica);            response.setId(condicaAdded.getIdDestinatar());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + condicaAdded.getNrInregistrare() + "/" + condicaAdded.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }}