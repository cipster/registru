package controllers.rest;import model.RezervareInregistrare;import model.entity.*;import model.response.JSONResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.dao.DataAccessException;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.acls.model.AlreadyExistsException;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import services.DestinatarService;import services.RegistruService;import services.TipContinutService;import java.beans.PropertyEditorSupport;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;@RestController@RequestMapping("/app/secure/registru")public class RegistruRestController {    private static final int ERROR = -1;    @Autowired    private RegistruService registruService;    @Autowired    private TipContinutService tipContinutService;    @Autowired    private DestinatarService destinatarService;    @InitBinder    public void initBinder(WebDataBinder binder) {        SimpleDateFormat sdf = new SimpleDateFormat("mm-dd-yyyy");        sdf.setLenient(true);        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true));        binder.registerCustomEditor(long.class, new PropertyEditorSupport() {            @Override            public void setAsText(String text) {                if (text.trim().length() == 0) {                    text = "0";                }                long ch = Long.parseLong(text);                setValue(ch);            }        });    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/duplicate/aoug/{val}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse duplicatAOUG(@PathVariable String val) {        return registruService.checkDuplicatAOUG(val);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/duplicate/ogb/{val}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse duplicatOGB(@PathVariable String val) {        return registruService.checkDuplicatOGB(val);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/duplicate/condica/{val}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse duplicatCondica(@PathVariable String val) {        return registruService.checkDuplicatCondica(val);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/duplicate/intrare/{val}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse duplicatIntrare(@PathVariable String val) {        return registruService.checkDuplicatIntrare(val);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/anulare/aoug/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse anulareAOUG(@PathVariable long id) {        return registruService.anulareAOUG(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/anulare/ogb/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse anulareOGB(@PathVariable long id) {        return registruService.anulareOGB(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/anulare/intrare/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse anulareIntrare(@PathVariable long id) {        return registruService.anulareIntrare(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/anulare/iesire/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse anulareIesire(@PathVariable long id) {        return registruService.anulareIesire(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/anulare/condica/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse anulareCondica(@PathVariable long id) {        return registruService.anulareCondica(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/ogb/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicOGB(@PathVariable long id) {        return registruService.formatFizicOGB(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/aoug/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicAOUG(@PathVariable long id) {        return registruService.formatFizicAOUG(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/intrare/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicIntrare(@PathVariable long id) {        return registruService.formatFizicIntrare(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/format-fizic/iesire/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse formatFizicIesire(@PathVariable long id) {        return registruService.formatFizicIesire(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-intrare", method = RequestMethod.GET)    @ResponseBody    public String findLastNrCrtIntrare() {        return registruService.findLastNrCrtIntrare();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-aoug", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareAoug() {        return registruService.findLastNrCrtAOUG();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-ogb", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareOgb() {        return registruService.findLastNrCrtOGB();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-last-condica", method = RequestMethod.GET)    @ResponseBody    public String findLastNrInregistrareCondica() {        return registruService.findLastNrCrtCondica();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-condica", method = RequestMethod.GET)    @ResponseBody    public List<CondicaPredarePrimireDocumenteViewEntity> findAllCondica() {        return registruService.findAllCondica();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-aoug", method = RequestMethod.GET)    @ResponseBody    public List<RegistruAOUGViewEntity> findAllAOUG() {        return registruService.findAllAOUG();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-ogb", method = RequestMethod.GET)    @ResponseBody    public List<RegistruOGBViewEntity> findAllOGB() {        return registruService.findAllOGB();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-intrare", method = RequestMethod.GET)    @ResponseBody    public List<IntrareViewEntity> findAllIntrari() {        return registruService.findAllIntrari();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_USER')")    @RequestMapping(value = "/get-iesire", method = RequestMethod.GET)    @ResponseBody    public List<IesireEntity> findAllIesiri() {        return registruService.findAllIesiri();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-all-tip-continut", method = RequestMethod.GET)    @ResponseBody    public List<TipContinutEntity> findAllTipContinut() {        return tipContinutService.findAll();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-all-destinatari", method = RequestMethod.GET)    @ResponseBody    public List<DestinatarEntity> findAllDestinatari() {        return destinatarService.findAllDestinatari();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-intrare", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addIntrare(@RequestBody IntrareEntity intrare) {        JSONResponse response = new JSONResponse();        try {            IntrareEntity intrareAdded = registruService.saveIntrare(intrare);            response.setId(intrareAdded.getIdIntrare());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + intrareAdded.getNrCrt() + "/" + intrareAdded.getDataIntrarii());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/edit-intrare", method = RequestMethod.POST)    @ResponseBody    public JSONResponse editIntrare(@RequestBody IntrareEntity intrare) {        JSONResponse response = new JSONResponse();        try {            IntrareEntity intrareAdaugat = registruService.editIntrare(intrare);            response.setId(intrareAdaugat.getIdIntrare());            response.setMessage("S-a actualizat &#238;nregistrarea: " + intrareAdaugat.getNrCrt() + " / " + intrareAdaugat.getDataIntrarii());        } catch (DataAccessException e) {            response.setMessage("Nu s-a actualizat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/rezerva-intrare", method = RequestMethod.POST)    @ResponseBody    public JSONResponse rezervaIntrare(@RequestBody RezervareInregistrare rezervare) {        JSONResponse response = new JSONResponse();        try {            List<IntrareEntity> intrareRezervate = registruService.rezervaIntrare(rezervare);            String msg = String.format("S-au rezervat %s &#238;nregistr&#259;ri pe data de %s", intrareRezervate.size(), rezervare.getDataInregistrare());            response.setMessage(msg);        } catch (DataAccessException e) {            response.setMessage("Nu s-au rezervat &#238;nregistr&#259;rile.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-iesire", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addIesire(@RequestBody IesireEntity iesire) {        JSONResponse response = new JSONResponse();        try {            IesireEntity iesireAdded = registruService.saveIesire(iesire);            response.setId(iesireAdded.getIdIesire());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + iesireAdded.getNrDosarSiAn() + "/" + iesireAdded.getRezolvare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/edit-iesire", method = RequestMethod.POST)    @ResponseBody    public JSONResponse editIesire(@RequestBody IesireEntity iesire) {        JSONResponse response = new JSONResponse();        try {            IesireEntity iesireAdaugat = registruService.editIesire(iesire);            response.setId(iesireAdaugat.getIdIesire());            response.setMessage("S-a actualizat &#238;nregistrarea: " + iesireAdaugat.getDataIesirii());        } catch (DataAccessException e) {            response.setMessage("Nu s-a actualizat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/rezerva-iesire", method = RequestMethod.POST)    @ResponseBody    public JSONResponse rezervaIesire(@RequestBody RezervareInregistrare rezervareIesire) {        JSONResponse response = new JSONResponse();        try {            List<IesireEntity> iesireRezervate = registruService.rezervaIesire(rezervareIesire);            String msg = String.format("S-au rezervat %s &#238;nregistr&#259;ri pe data de %s", iesireRezervate.size(), rezervareIesire.getDataInregistrare());            response.setMessage(msg);        } catch (DataAccessException e) {            response.setMessage("Nu s-au rezervat &#238;nregistr&#259;rile.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-aoug", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addInregistrareAOUG(@RequestBody RegistruAOUGEntity registruAOUG) {        JSONResponse response = new JSONResponse();        try {            RegistruAOUGEntity registruAOUGAdaugat = registruService.saveAOUG(registruAOUG);            response.setId(registruAOUGAdaugat.getIdRegistruAoug());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + registruAOUGAdaugat.getNrInregistrare() + "/" + registruAOUGAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/edit-aoug", method = RequestMethod.POST)    @ResponseBody    public JSONResponse editInregistrareAOUG(@RequestBody RegistruAOUGEntity registruAoug) {        JSONResponse response = new JSONResponse();        try {            RegistruAOUGEntity registruAougAdaugat = registruService.editAOUG(registruAoug);            response.setId(registruAougAdaugat.getIdRegistruAoug());            response.setMessage("S-a actualizat &#238;nregistrarea: " + registruAougAdaugat.getNrInregistrare() + "/" + registruAougAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a actualizat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/rezerva-aoug", method = RequestMethod.POST)    @ResponseBody    public JSONResponse rezervaAOUG(@RequestBody RezervareInregistrare rezervareAoug) {        JSONResponse response = new JSONResponse();        try {            List<RegistruAOUGEntity> aougRezervate = registruService.rezervaAoug(rezervareAoug);            String msg = String.format("S-au rezervat %s &#238;nregistr&#259;ri pe data de %s", aougRezervate.size(), rezervareAoug.getDataInregistrare());            response.setMessage(msg);        } catch (DataAccessException e) {            response.setMessage("Nu s-au rezervat &#238;nregistr&#259;rile.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-ogb", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addInregistrareOGB(@RequestBody RegistruOGBEntity registruOGB) {        JSONResponse response = new JSONResponse();        try {            RegistruOGBEntity registruOGBAdaugat = registruService.saveOGB(registruOGB);            response.setId(registruOGBAdaugat.getIdRegistruOgb());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + registruOGBAdaugat.getNrInregistrare() + "/" + registruOGBAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/edit-ogb", method = RequestMethod.POST)    @ResponseBody    public JSONResponse editInregistrareOGB(@RequestBody RegistruOGBEntity registruOGB) {        JSONResponse response = new JSONResponse();        try {            RegistruOGBEntity registruOGBAdaugat = registruService.editOGB(registruOGB);            response.setId(registruOGBAdaugat.getIdRegistruOgb());            response.setMessage("S-a actualizat &#238;nregistrarea: " + registruOGBAdaugat.getNrInregistrare() + "/" + registruOGBAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a actualizat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/rezerva-ogb", method = RequestMethod.POST)    @ResponseBody    public JSONResponse rezervaOGB(@RequestBody RezervareInregistrare rezervareOgb) {        JSONResponse response = new JSONResponse();        try {            List<RegistruOGBEntity> ogbRezervate = registruService.rezervaOGB(rezervareOgb);            String msg = String.format("S-au rezervat %s &#238;nregistr&#259;ri pe data de %s", ogbRezervate.size(), rezervareOgb.getDataInregistrare());            response.setMessage(msg);        } catch (DataAccessException e) {            response.setMessage("Nu s-au rezervat &#238;nregistr&#259;rile.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-tip-continut", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addTipContinut(@RequestBody TipContinutEntity tipContinut) {        JSONResponse response = new JSONResponse();        try {            TipContinutEntity tipContinutAdded = tipContinutService.save(tipContinut);            response.setId(tipContinutAdded.getIdTipContinut());            response.setMessage("S-a ad&#259;ugat tipul de con&#539;inut: " + tipContinutAdded.getTipContinut());        } catch (AlreadyExistsException e) {            response.setMessage(e.getMessage());            response.setId(ERROR);        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat tipul de con&#539;inut.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/tip-continut/{id}", method = RequestMethod.GET)    @ResponseBody    public TipContinutEntity tipContinut(@PathVariable long id) {        return tipContinutService.getTipContinut(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/delete-tip-continut/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse deleteTipContinut(@PathVariable long id) {        tipContinutService.deleteTipContinut(id);        return new JSONResponse("Tipul de con&#539;inut a fost &#x219;ters");    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-destinatar", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addDestinatar(@RequestBody DestinatarEntity destinatar) {        JSONResponse response = new JSONResponse();        try {            DestinatarEntity destinatarAdded = destinatarService.save(destinatar);            response.setId(destinatarAdded.getIdDestinatar());            response.setMessage("S-a ad&#259;ugat destinatarul: " + destinatarAdded.getDestinatar());        } catch (AlreadyExistsException e) {            response.setMessage(e.getMessage());            response.setId(ERROR);        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat destinatarul.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/destinatar/{id}", method = RequestMethod.GET)    @ResponseBody    public DestinatarEntity destinatar(@PathVariable long id) {        return destinatarService.getDestinatar(id);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/delete-destinatar/{id}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse deleteDestinatar(@PathVariable long id) {        destinatarService.deleteDestinatar(id);        return new JSONResponse("Destinatarul a fost &#x219;ters");    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-condica", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addCondica(@RequestBody CondicaPredarePrimireDocumenteEntity condica) {        JSONResponse response = new JSONResponse();        try {            CondicaPredarePrimireDocumenteEntity condicaAdded = registruService.saveCondica(condica);            response.setId(condicaAdded.getIdCondicaPredareSiPrimireDocumente());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + condicaAdded.getNrInregistrare() + "/" + condicaAdded.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/edit-condica", method = RequestMethod.POST)    @ResponseBody    public JSONResponse editCondica(@RequestBody CondicaPredarePrimireDocumenteEntity condicaPredarePrimireDocumente) {        JSONResponse response = new JSONResponse();        try {            CondicaPredarePrimireDocumenteEntity condicaAdaugat = registruService.editCondica(condicaPredarePrimireDocumente);            response.setId(condicaAdaugat.getIdCondicaPredareSiPrimireDocumente());            response.setMessage("S-a actualizat &#238;nregistrarea: " + condicaAdaugat.getNrInregistrare() + "/" + condicaPredarePrimireDocumente.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a actualizat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/rezerva-condica", method = RequestMethod.POST)    @ResponseBody    public JSONResponse rezervaCondica(@RequestBody RezervareInregistrare rezervareCondica) {        JSONResponse response = new JSONResponse();        try {            List<CondicaPredarePrimireDocumenteEntity> condicaRezervate = registruService.rezervaCondica(rezervareCondica);            String msg = String.format("S-au rezervat %s &#238;nregistr&#259;ri pe data de %s", condicaRezervate.size(), rezervareCondica.getDataInregistrare());            response.setMessage(msg);        } catch (DataAccessException e) {            response.setMessage("Nu s-au rezervat &#238;nregistr&#259;rile.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }}