package controllers.rest;import model.IntrareViewEntity;import model.RegistruAOUGEntity;import model.RegistruAOUGViewEntity;import model.TipContinutEntity;import model.response.JSONResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.dao.DataAccessException;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import services.RegistruService;import services.TipContinutService;import java.beans.PropertyEditorSupport;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;@RestController@RequestMapping("/app/secure/registru")public class RegistruRestController {    @Autowired    private RegistruService registruService;    @Autowired    private TipContinutService tipContinutService;    @InitBinder    public void initBinder(WebDataBinder binder) {        SimpleDateFormat sdf = new SimpleDateFormat("mm-dd-yyyy");        sdf.setLenient(true);        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true));        binder.registerCustomEditor(long.class, new PropertyEditorSupport() {            @Override            public void setAsText(String text) {                if (text.trim().length() == 0) {                    text = "0";                }                long ch = Long.parseLong(text);                setValue(ch);            }        });    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-intrare", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addInregistrareNoua(@RequestBody RegistruAOUGEntity registruAOUG) {        JSONResponse response = new JSONResponse();        try {            RegistruAOUGEntity registruAOUGAdaugat = registruService.save(registruAOUG);            response.setId(registruAOUGAdaugat.getIdRegistruAoug());            response.setMessage("S-a ad&#259;ugat &#238;nregistrarea: " + registruAOUGAdaugat.getNrInregistrare() + "/" + registruAOUGAdaugat.getDataInregistrare());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad#259;ugat &#238;nregistrarea.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/add-tip-continut", method = RequestMethod.POST)    @ResponseBody    public JSONResponse addTipContinut(@RequestBody TipContinutEntity tipContinut) {        JSONResponse response = new JSONResponse();        try {            TipContinutEntity tipContinutAdded = tipContinutService.save(tipContinut);            response.setId(tipContinutAdded.getIdTipContinut());            response.setMessage("S-a ad&#259;ugat tipul de con&#539;inut: " + tipContinutAdded.getTipContinut());        } catch (DataAccessException e) {            response.setMessage("Nu s-a ad&#259;ugat tipul de con&#539;inut.<br> Re&#238;nc&#259;rca&#539;i pagina!");        }        return response;    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-aoug", method = RequestMethod.GET)    @ResponseBody    public List<RegistruAOUGViewEntity> findAllAOUG() {        return registruService.findAllAOUG();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER')")    @RequestMapping(value = "/get-intrare", method = RequestMethod.GET)    @ResponseBody    public List<IntrareViewEntity> findAllIntrari() {        return registruService.findAllIntrari();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_SUPERUSER','ROLE_USER')")    @RequestMapping(value = "/get-all-tip-continut", method = RequestMethod.GET)    @ResponseBody    public List<TipContinutEntity> findAllTipContinut() {        return tipContinutService.findAll();    }}