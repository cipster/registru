package controllers.rest;import model.entity.ProfilEntity;import model.entity.ProfilViewEntity;import model.entity.UserDisplayEntity;import model.entity.UserRoleEntity;import model.response.JSONResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import services.ProfilService;import java.beans.PropertyEditorSupport;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;@RestController@RequestMapping("/app/secure/profil")public class ProfilRestController {    @Autowired    private ProfilService profilService;    @InitBinder    public void initBinder(WebDataBinder binder) {        SimpleDateFormat sdf = new SimpleDateFormat("mm-dd-yyyy");        sdf.setLenient(true);        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true));        binder.registerCustomEditor(long.class, new PropertyEditorSupport() {            @Override            public void setAsText(String text) {                if (text.trim().length() == 0) {                    text = "0";                }                long ch = Long.parseLong(text);                setValue(ch);            }        });    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")    @RequestMapping(value = "/get-user", method = RequestMethod.GET)    @ResponseBody    public ProfilViewEntity getLoggedInUser() {        return profilService.getProfil();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_SUPERUSER')")    @RequestMapping(value = "/get-user/{username}", method = RequestMethod.GET)    @ResponseBody    public ProfilViewEntity getUserById(@PathVariable String username) {        return profilService.getProfil(username);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN')")    @RequestMapping(value = "/activate-user/{idUser}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse activateUser(@PathVariable long idUser) {        boolean operationSuccessful = profilService.activateUser(idUser);        if (operationSuccessful) {            return new JSONResponse("Utilizatorul a fost activat");        } else {            return new JSONResponse("Utilizatorul nu a fost activat");        }    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN')")    @RequestMapping(value = "/deactivate-user/{idUser}", method = RequestMethod.GET)    @ResponseBody    public JSONResponse deactivateUser(@PathVariable long idUser) {        boolean operationSuccessful = profilService.deactivateUser(idUser);        if (operationSuccessful) {            return new JSONResponse("Utilizatorul a fost dezactivat");        } else {            return new JSONResponse("Utilizatorul nu a fost dezactivat");        }    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_SUPERUSER')")    @RequestMapping(value = "/get-all-users", method = RequestMethod.GET)    @ResponseBody    public List<UserDisplayEntity> getAllUsers() {        return profilService.getAllUsers();    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN')")    @RequestMapping(value = "/get-all-roles/{username}", method = RequestMethod.GET)    @ResponseBody    public List<UserRoleEntity> getAllRolesForUser(@PathVariable String username) {        return profilService.getAllRolesForUser(username);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")    @RequestMapping(value = "/schimba-parola/{password}", method = RequestMethod.GET, produces = "application/json")    @ResponseBody    public JSONResponse changePassword(@PathVariable String password) {        return profilService.changePassword(password);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")    @RequestMapping(value = "/save-user", method = RequestMethod.POST, produces = "application/json")    @ResponseBody    public JSONResponse changeUser(@RequestBody ProfilEntity profil) {        return profilService.save(profil);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_USER')")    @RequestMapping(value = "/edit-user", method = RequestMethod.POST, produces = "application/json")    @ResponseBody    public JSONResponse editUser(@RequestBody UserDisplayEntity userDisplay) {        return profilService.saveUser(userDisplay);    }    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_SUPERUSER')")    @RequestMapping(value = "/add-user", method = RequestMethod.POST, produces = "application/json")    @ResponseBody    public JSONResponse addUser(@RequestBody UserDisplayEntity userDisplay) {        return profilService.saveNewUser(userDisplay);    }}